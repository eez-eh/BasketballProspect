//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class ProspectsRespone {

	public class Parameters {
		public String LeagueID {get;set;} 
		public String Season {get;set;} 
		public Integer IsOnlyCurrentSeason {get;set;} 

		public Parameters(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'LeagueID') {
							LeagueID = parser.getText();
						} else if (text == 'Season') {
							Season = parser.getText();
						} else if (text == 'IsOnlyCurrentSeason') {
							IsOnlyCurrentSeason = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Parameters consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	public class ResultSets {
		public String name {get;set;} 
		public List<String> headers {get;set;} 
        @AuraEnabled
		public List<List<String>> rowSet {get;set;} 

		public ResultSets(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'headers') {
							headers = arrayOfString(parser);
						} else if (text == 'rowSet') {
							rowSet = arrayOfList(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ResultSets consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String resource {get;set;} 
	public Parameters parameters {get;set;} 
    @AuraEnabled
	public List<ResultSets> resultSets {get;set;} 

	public ProspectsRespone(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'resource') {
						resource = parser.getText();
					} else if (text == 'parameters') {
						parameters = new Parameters(parser);
					} else if (text == 'resultSets') {
						resultSets = arrayOfResultSets(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'ProspectsRespone consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static ProspectsRespone parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new ProspectsRespone(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Integer> arrayOfInteger(System.JSONParser p) {
        List<Integer> res = new List<Integer>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getIntegerValue());
        }
        return res;
    }


    private static List<List<String>> arrayOfList(System.JSONParser p) {
        List<List<String>> res = new List<List<String>>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(arrayOfString(p));
        }
        return res;
    }




    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }



    private static List<ResultSets> arrayOfResultSets(System.JSONParser p) {
        List<ResultSets> res = new List<ResultSets>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ResultSets(p));
        }
        return res;
    }



}